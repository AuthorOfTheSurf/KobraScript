PROGRAM ::=  STMT+
        |    BLUPRNT

BLOCK   ::=  ':'  STMT+  ('end' | '..')


TYPE    ::=  ('bool' | 'char' | 'int' | 'float' | 'str' | 'bit' | 'undefined' | 'null' | ID)  ('[]')*
FNTYPE  ::=  'proc' | 'fn'

DECLAR  ::=  '$' (VARDEC | FNDEC)
        |    FNDEC2
ASSIGN  ::=  ID  '='  EXP  END
        |    ID  ':=:'  ID  END
VARDEC  ::=  DEC  (','  DEC)*  END
DEC     ::=  ID  '=' (BLUDEC | EXP  ('#'  EXP)?)
FNDEC   ::=  (ID  '='  FNTYPE  PARAMS  BLOCK  ',')*  ID  '='  FNTYPE  PARAMS  BLOCK
FNDEC2  ::=  FNTYPE  (ID)?  PARAMS  BLOCK

BLUPRNT ::=  '$'  'blueprint'  ID  BLUBLK  'defcc'
BLUDEC  ::=  ID  '('  ID  '='  EXP  (','  ID  '='  EXP)*  ')'
        |    ID  '('  ID  (','  ID)*  ')'
BLUBLK  ::=  ':'  HASBLK  DOESBLK  SYNTH*  ('..' | 'end')
HASBLK  ::=  'has'  '{'  VARDEC?  '}'
DOESBLK ::=  'does'  '{'  FNDEC?  FNDEC2* '}'
SYNTH   ::=  ('synset' | 'synget') '{'  (ID  ',')*  ID  '}'

VAR     ::=  ID
        |    VAR  '['  EXP  ']'
        |    VAR  '.'  ID

STMT    ::=  STMT END
        |    DEC
        |    DEC  'if'  EXP
        |    'if'  '('  EXP  ')'  BLOCK  ('else if'  '('  EXP  ')'  BLOCK)*  ('else'  '('  EXP  ')'  BLOCK)?
        |    'for'  '('  (VARDEC)?  ';'  EXP  ';'  INCREMENT  ')'  BLOCK 
        |    'while'  '('  EXP  ')'  BLOCK
        |    'return'  EXP

EXP     ::=  ('~!' | '~?')  EXP1
EXP1    ::=  EXP2 (('**' | '-**')  EXP2)
EXP2    ::=  EXP3 ([%*/] EXP3)*
EXP3    ::=  EXP4 ([+-] EXP4)*
EXP4    ::=  EXP5 (('<' | '<=' | '==' | '~=' '!=' | '>=' | '>' | 'is') EXP5)?
EXP5    ::=  ('!')?  (EXP5 | EXP6)
EXP6    ::=  EXP7 ('||' | '&&') EXP7
EXP7    ::=  'true' | 'false' | 'undefined' | 'null' | STR | INT | FLOAT | HEX | ID | '(' EXP ')'

END     ::=  ';'

PARAM   ::=  VAR | EXP
PARAMS  ::=  '('  PARAM  (','  PARAM)*  ')'
INCR    ::=  VAR  "++"
        |    VAR  "--"
        |    VAR  "+="  int
        |    VAR  "-="  int
        |    VAR  "*="  int

COMMENT ::=  '--'  TEXT  END
        |    '---'  TEXT  '!--'