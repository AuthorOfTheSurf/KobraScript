$ name = "Samson"
$ a, b, c = 5, 12, 13 --implicit cast to int; multi-assignment ok.
$ protein_intake = [12, 21.3, 7.2, 20] : float[]

---alternatively:
$ protein_intake = float[12, 21.3, 7.2, 20]
!--

$ body_fat = 11.267   --throws missing typecast, int is a defaulty thing, float must be aknowledged with token
$ total : int         --type (only) assignment; takes on predetermined 'defaulty' values

---discouraged but equivalent
$ calorie_loss = undefined : int  
!--

$ secret_code = 110 001 010 : bits --spaces are fine; declare clearly decipherable bit values
$ lucky_sequence = 111 111 111 : bits
$ my_color = a6 b4 29 : hex

--x can be any type, more specifically, x assumes the same value and type of the parameter
floatfn average_intake (x): --parameters have optional type-casting
    $ total = 0
    for ($ i = 0; i < x.length; i++)
        total = total + x[i]
    }  
    console.log(total) --alternative loge invocation available
    return total / x.length
}

$ blue = 00 00 ff : hex
$ bicycle = {
    frame = "aluminum" : str,
    year = 2009 : int,
    gears = 10 : int,
    speed = 12.7 : float
    
    move = proc ():
        Transform.translate(FORWARD * this.speed)
    end,
    upgrade_speed = floatfn ():
        return this.speed = this.speed * 1.1
    end,
    get_frame = strfn (): return this.frame; end --one-liner function syntax (semicolon required)
}

$ is_red = true,
  is_food = false,
  is_mine = true;

--  Optimal if, elseif, else
if (is_red && is_food):
    eat ()
.. else if (is_food && is_mine):
    add_butter ()
.. else:
    keep ()
end

--  Verbose if, elif, else (strongly discouraged)
if (is_red && is_food):
    eat ()
end else if (is_food && is_mine):
    add_butter ()
end else:
    keep ()
end


-- Extra
$ is_cold = true if (temperature < 60.0) 
$ jordan, kobe = 24, 23
jordan :=: kobe         --swap values

--  For and while example
$ a = 0
for ($ i = 0, i < 4, i++):
    a++
end

while (a < 10):
    a++
end

--  TODO Switch Statement, figure out breaks
switch (x):
    case 0 -> a()
    case 1 -> b()
    default -> console.log("I gotta")
end





